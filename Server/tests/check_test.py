"""
This script tests the functionality of the check_session API call.
For correct results run this against the test data as generated by
database.py.
"""

import json
import urllib.request
import urllib.error

# Helper VARS
host = '127.0.0.1'
base_url = f'http://{host}:5000'

print('')

"""
HELPER FUNCTIONS
"""


# Generate correct url for API call and ID
def generate_url(call, used_id):
    return f'{base_url}/{call}?id={used_id}'


# Send request, and convert reply into JSON
def req(call, used_id):
    url = generate_url(call, used_id)
    reply = urllib.request.urlopen(url)
    content = reply.read().decode('utf-8')
    return json.loads(content)


"""
TEST FUNCTIONS
"""


def check_session(student_id, expected_value):
    test_status = ' OK'
    error = ''

    data = req('check_session', student_id)

    if data['status'] != expected_value['status']:
        test_status = ''
        error += f' ERROR: {data["status"]} is not {expected_value["status"]}'

    if data['id'] != expected_value['id']:
        test_status = ''
        error += f' ERROR: {data["id"]} is not {expected_value["id"]}'

    return f'STATUS -{test_status}{error}'


"""
RUNNING TESTS
"""

# TEST 1    - CHECK SESSION
t1 = check_session(1, {'status': 'running', 'id': 2})
print(f'1. \tCheck session \t\t\t\t\t\t- {t1}')

# TEST 2    - CHECK SESSION AGAIN
t2 = check_session(1, {'status': 'running', 'id': 2})
print(f'2. \tCheck session again \t\t\t\t- {t2}')

# COMMAND   - STOP SESSION FOR ACTIVITY 2
req('toggle_session', 2)

# TEST 3    - CHECK IF SESSION STOPPED, AND RECORDING STOPPED
t3 = check_session(1, {'status': 'stopped', 'id': None})
print(f'3. \tCheck session after stopping \t\t- {t3}')

# COMMAND   - START NEW SESSION FOR ACTIVITY 2
req('toggle_session', 2)

# TEST 4    - CHECK IF NEW SESSION IS STARTED, AND RECORDING STARTED
t4 = check_session(1, {'status': 'running', 'id': 5})
print(f'4. \tCheck session after starting again \t- {t4}')
